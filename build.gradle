plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "3.1.1"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
	mavenCentral()
}

sonarqube {
	properties {
		property "sonar.projectKey", "bearname_buyer-experience"
		property "sonar.organization", "mikushov-mihail-github"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}


jacoco {
	toolVersion = "0.8.6"
}
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
	}
}

jar {
  archiveBaseName = 'gs-gradle'
  archiveVersion =  '0.1.0'
  manifest {
    attributes "Main-Class": "com.example.restservice.RestServiceApplication"
  }

  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '1.2.0.RELEASE'
	implementation group: 'org.springframework', name: 'spring-context-support', version: '5.3.5'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.4.4'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.1
			}
		}
	}
}